# -------------------------------------------------------------
# Подготовка к работе с виртуальными машинами
# -------------------------------------------------------------

# Обновление списка пакетов и установка необходимых зависимостей:
sudo apt-get update
sudo apt-get install -y build-essential curl git

# Установка Ruby и менеджера пакетов Ruby (RubyGems):
sudo apt-get install -y ruby-full

# Установка Vagrant:
sudo apt-get install -y vagrant

# Установка VirtualBox (провайдер виртуализации для Vagrant):
sudo apt-get install -y virtualbox

# Установка плагина vagrant-vbguest
# (для автоматической установки гостевых дополнений VirtualBox):
sudo vagrant plugin install vagrant-vbguest

# Установка плагина vagrant-json для взаимодействия с json-файлами:
vagrant plugin install vagrant-json

# Проверка установленных версий:
ruby --version
vagrant --version
vboxmanage --version

# --------------------------------------------------------------
# Для проверки создать простую VM например в ~/virt/vm_sunpp
# --------------------------------------------------------------

# Если активирован какой-либо environment, то лучше деактивировать
conda deactivate

# Переход в директорию, где будет VM создана
cd ~/virt
mkdir vm_min
cd vm_min

# Использование ключа -m или --minimal позволяет создать 
# файл Vagrantfile минимального размера, без комментариев.
# Инициализация и установка ubuntu/bionic64 сразу  
vagrant init -m ubuntu/bionic64

# Получим файл для создания VM минимальной конфигурации
'''
Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/bionic64"
end
'''

# Запуск VM и вход в систему по ssh
vagrant ssh

# теперь из окна терминала мы видим консоль минимальной ubuntu
vagrant@ubuntu-bionic:~$

Welcome to Ubuntu 18.04.6 LTS (GNU/Linux 4.15.0-212-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Mon Jul  1 00:48:32 UTC 2024

  System load:  0.72              Processes:             101
  Usage of /:   3.0% of 38.70GB   Users logged in:       0
  Memory usage: 12%               IP address for enp0s3: 10.0.2.15
  Swap usage:   0%


Expanded Security Maintenance for Infrastructure is not enabled.

0 updates can be applied immediately.

Enable ESM Infra to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status

New release '20.04.6 LTS' available.
Run 'do-release-upgrade' to upgrade to it.


Last login: Mon Jul  1 00:41:35 2024 from 10.0.2.2


# и можно отсюда дать команду проапгрейдить ubuntu

# --------------------------------------------------------------
# Для проверки создать простую VM например в ~/virt/vm_sunpp
# --------------------------------------------------------------

# Модифицируем Vagrantfile и добавим
# Два сетевых интерфейса: NAT + Bridged
'''
Vagrant.configure(2) do |config|
  # образ системы Ubuntu 18/04 LTS (Bionic Beaver)
  config.vm.box = "bento/ubuntu-18.04"

  # не проверять репозиторий на наличие обновлений
  config.vm.box_check_update = false

  config.vm.provider "virtualbox" do |vb|
    
    vb.name = "ubuntu-1804-test" # имя виртуальной машины

    
    vb.memory = 2048             # объем оперативной памяти    
    vb.cpus = 1                  # количество ядер процессора
  end
  

  # hostname виртуальной машины
  config.vm.hostname = "ubuntu-1804-test"

  # настройка сети (сетевой мост на втором интерфейсе)
  config.vm.network "public_network"
end  
'''

# Остановим VM
vagrant halt

# Удалим ее
vagrant destroy

# запустим уже с новым Vagrantfile
vagrant up

# зайдем по ключу
vagrant ssh
"""
Welcome to Ubuntu 18.04.6 LTS (GNU/Linux 4.15.0-206-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

This system is built by the Bento project by Chef Software
More information can be found at https://github.com/chef/bento

"""

# Какой сетевой интерфасе?
ip addr
'''
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 08:00:27:4b:a1:76 brd ff:ff:ff:ff:ff:ff
    inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic eth0
       valid_lft 85969sec preferred_lft 85969sec
    inet6 fe80::a00:27ff:fe4b:a176/64 scope link 
       valid_lft forever preferred_lft forever
3: eth1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 08:00:27:63:6e:37 brd ff:ff:ff:ff:ff:ff
    inet 192.168.0.197/24 brd 192.168.0.255 scope global dynamic eth1
       valid_lft 6769sec preferred_lft 6769sec
    inet6 fe80::a00:27ff:fe63:6e37/64 scope link 
       valid_lft forever preferred_lft forever

'''


# --------------------------------------------------------------

# Установите плагин vagrant-json:
vagrant plugin install vagrant-json

# При работе с config.json Vagrant получает данные на вход:
'''
{
  "vm": {
    "box": "bento/ubuntu-18.04",
    "hostname": "myvm",
    "network": {
      "private_network": {
        "ip": "192.168.33.10"
      }
    },
    "provider": {
      "virtualbox": {
        "memory": 2048,
        "cpus": 2
      }
    }
  }
}
'''

# и выполняет команды:

vagrant up --json config.json

# Использование JSON-файлов может быть полезно,
# если вы хотите иметь возможность легко редактировать конфигурацию
# виртуальных машин или использовать одну и ту же конфигурацию
# для нескольких виртуальных машин.

# Как использовать json из vagrant?

require 'json'

# Загрузка конфигурации из JSON-файла
config_data = JSON.parse(File.read('config.json'))

Vagrant.configure("2") do |config|
  # Импорт конфигурации из JSON-файла
  config_data['vm'].each do |name, vm_config|
    config.vm.define name do |machine|
      machine.vm.box = vm_config['box']
      machine.vm.hostname = vm_config['hostname']

      if vm_config.key?('network')
        vm_config['network'].each do |network_name, network_config|
          machine.vm.network network_name, network_config
        end
      end

      if vm_config.key?('provider')
        vm_config['provider'].each do |provider_name, provider_config|
          machine.vm.provider provider_name do |provider|
            provider_config.each do |key, value|
              provider.send(key.to_sym, value)
            end
          end
        end
      end
    end
  end
end

